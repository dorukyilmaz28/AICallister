generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  password          String
  teamNumber        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  role              String             @default("member")
  status            String             @default("pending")
  teamId            String?
  conversations     Conversation[]
  teamChats         TeamChat[]
  teamJoinRequests  TeamJoinRequest[]
  teamMemberships   TeamMember[]
  teamNotifications TeamNotification[]
  adminTeams        Team[]             @relation("TeamAdmin")
  team              Team?              @relation(fields: [teamId], references: [id])

  @@map("users")
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  context   String    @default("general")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  role           String
  content        String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Team {
  id            String             @id @default(cuid())
  name          String
  description   String?
  teamNumber    String?            @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  adminId       String?
  chats         TeamChat[]
  joinRequests  TeamJoinRequest[]
  members       TeamMember[]
  notifications TeamNotification[]
  admin         User?              @relation("TeamAdmin", fields: [adminId], references: [id])
  users         User[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  role     String   @default("member")
  joinedAt DateTime @default(now())
  userId   String
  teamId   String
  status   String   @default("approved")
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamChat {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_chats")
}

model TeamJoinRequest {
  id        String   @id @default(cuid())
  status    String   @default("pending")
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_join_requests")
}

model TeamNotification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  teamId    String
  userId    String?
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_notifications")
}
