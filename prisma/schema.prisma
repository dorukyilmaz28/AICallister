// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  teamNumber String? // FRC team number (e.g., "9024")
  teamId    String?  // Hangi takımda olduğu
  role      String   @default("member") // member, admin
  status    String   @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // İlişkiler
  conversations Conversation[]
  teamMemberships TeamMember[]
  teamChats TeamChat[]
  teamJoinRequests TeamJoinRequest[]
  teamNotifications TeamNotification[]
  team Team? @relation(fields: [teamId], references: [id])
  adminTeams Team[] @relation("TeamAdmin")
  
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  context   String   @default("general") // general, strategy, mechanical, simulation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // İlişkiler
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  role      String   // user, assistant
  content   String
  createdAt DateTime @default(now())
  
  // İlişkiler
  conversationId String
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamNumber  String?  @unique // FRC team number (e.g., "1234")
  adminId     String?  // Takım yöneticisinin ID'si
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // İlişkiler
  members TeamMember[]
  chats   TeamChat[]
  joinRequests TeamJoinRequest[]
  notifications TeamNotification[]
  users User[] // Takımdaki kullanıcılar
  admin User? @relation("TeamAdmin", fields: [adminId], references: [id])
  
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("member") // member, admin
  status    String   @default("approved") // approved, pending, rejected
  joinedAt  DateTime @default(now())
  
  // İlişkiler
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamChat {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  // İlişkiler
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("team_chats")
}

model TeamJoinRequest {
  id        String   @id @default(cuid())
  status    String   @default("pending") // pending, approved, rejected
  message   String?  // Kullanıcının katılım mesajı
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // İlişkiler
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_join_requests")
}

model TeamNotification {
  id        String   @id @default(cuid())
  type      String   // "join_request", "member_joined", "member_left", "message"
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // İlişkiler
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String? // Hangi kullanıcıyla ilgili (opsiyonel)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("team_notifications")
}
